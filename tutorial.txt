1. Intall and run virtual environment

    pip install virtualenv
    virtualenv env

2. Activate virtual environment

    Ctrl+Shift+P ---> Search for an Interpretor ---> Click on Python Virtual Environment
    Close terminal (or kill) and open again

3. Download Django

    pip install django

4. Outputting all dependencies to the file

    pip freeze > requirments.txt

5. Creating a project that we will work in

    django-admin startproject djticket .

6. Creating .gitignore in the main branch (get the content from python github)

7. Migrate changes (also creates the database) and run the server (using manage.py to execute commands in Django)

    python manage.py migrate
    python manage.py runserver

8. asgi.py and wsgi.py are for deploying web-application asynchroniously

9. settings.py

    while developing the application DEBUG = True. In production DEBUG = False (very important)
    ALLOWED_HOSTS = ['domain.name.com'] (without https)
    if we will use our own folder with templates ---> TEMPLATES ---> 'DIRS': [list of directories]
    if we will use another database we can configure it in DATABASES (sqlite3 by default)

10. Creating an app (conteinorized module for users, billing, payment (for each we will create a separate app file))

    python manage.py startapp customers

11. Inside the folder edit models.py by adding class for Customer (that will be shown in our database)

12. After editing models.py

    python manage.py makemigrations
    python manage.py migrate

    now the class that we created is applied to the database db.sqlite3

REFERENCE FOR ADDING PICTURES IN THE FORM (1:00:00)

13. Adding foreign key which links one table to another (models.py)

14. In settings AUTH_USER_MODEL

15. Creating queries

    enter the shell (in order to exit run exit()):
    python manage.py shell

    here we can import models into the shell
    from customers.models import class_name

    class_name.objects.all()

    in order to see all users:

    >>> from django.contrib.auth import get_user_model
    >>> User = get_user_model()
    >>> User.objects.all()

    after creating user we can modify him
    user = User.objects.create(username="username")
    user.first_name = "first_name"

16. Creating admin user

    python manage.py createsuperuser

    User RGTS was created

